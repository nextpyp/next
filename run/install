#!/bin/sh

# exit the installer if any command fails
set -e


# the installer should be run as root
if [ "$(whoami)" != "root" ]; then
  echo "This installer should be run as root"
  exit 1
fi


# build-time settings (to be filled in by a build script)
version="__TARGET_VERSION__"


# check that the build process actually ran
tva=__TARGET
tvb=_VERSION__
if [ "$version" = "$tva$tvb" ]; then
  echo "No version set by the build process."
  exit
fi


# gather info about the local environment
here=$(pwd)

# get the username
username=$PYP_USER
if [ -z "$username" ]; then
  echo "No PYP_USER set."
  exit
fi

# get the usergroup
usergroup=$PYP_GROUP
if [ -z "$usergroup" ]; then
  if getent group "$username"; then
    usergroup=$username
  else
    echo "$username is not a valid group. Choose the pyp group by setting PYP_GROUP"
    exit
  fi
fi

echo "Installing nextPYP $version for user $username ..."


# make a way to do things as the specified user
# user do, `usdo`, the complement of `sudo`
usdo="sudo -u $username"


# download the distribution files
echo "Downloading installation files ..."
www="https://nextpyp.app/files/pyp/$version"
wgetopts="-nv"
# for interactive use, it's helpful to turn on the progress bar to track long downloads
#wgetopts="$wgetopts --progress=bar"
wget $wgetopts -O "nextPYP.sif" "$www/nextPYP.sif"
wget $wgetopts -O "pyp.sif" "$www/pyp.sif"
wget $wgetopts -O "hostprocessor" "$www/hostprocessor"
wget $wgetopts -O "start" "$www/start"
wget $wgetopts -O "stop" "$www/stop"
wget $wgetopts -O "uninstall" "$www/uninstall"
wget $wgetopts -O "install-rprox" "$www/install-rprox"

chmod ugo+r "nextPYP.sif" "pyp.sif" "uninstall" "install-rprox"

# NOTE: we don't make the local scripts in $here executable
#       instead, the installation instructions ask the user to inspect them first
#       and then chmod +x later if satisfied

# move the executables into /usr/bin (otherwise SELinux will deny access)
mv "$here/start" "/usr/bin/nextpyp-start"
chmod ugo+rx "/usr/bin/nextpyp-start"
mv "$here/stop" "/usr/bin/nextpyp-stop"
chmod ugo+rx "/usr/bin/nextpyp-stop"
mv "$here/hostprocessor" "/usr/bin/nextpyp-hostprocessor"
chmod ugo+rx "/usr/bin/nextpyp-hostprocessor"

# download the workflow files
workflowDir="$here/workflows"
workflowWww="$www/workflows"
mkdir -p "$workflowDir"
wget $wgetopts -O "$workflowDir/spr_tutorial.toml" "$workflowWww/spr_tutorial.toml"
wget $wgetopts -O "$workflowDir/tomo_tutorial.toml" "$workflowWww/tomo_tutorial.toml"
wget $wgetopts -O "$workflowDir/class_tutorial.toml" "$workflowWww/class_tutorial.toml"
chmod -R ugo+r "$workflowDir"/*

# create initial directories
localDir="$here/local"
mkdir -p "$localDir"
chown "$username:$usergroup" "$localDir"
echo "Created local directory: $localDir"

sharedDir="$here/shared"
mkdir -p "$sharedDir"
chown "$username:$usergroup" "$sharedDir"
echo "Created shared directory: $sharedDir"

# create the home configuration folder, if needed (needed by apptainer)
home=/home/$username
if [ ! -d "$home" ]; then
  mkdir -p "$home"
  chown -R "$username:$usergroup" "$home"
  chmod u+rwx,go+rx,go-w "$home"
fi
if [ ! -d "$home/.config" ]; then
  $usdo mkdir -p "$home/.config"
  echo "Created $home/.config directory"
fi

# generate the initial configuration
configPath="$here/config.toml"
if [ -f "$configPath" ]; then
  echo "Using existing configuration file: $configPath"
else
  cat << EOF > "$configPath"

[pyp]
# path to the PYP container file, from a SLURM compute node's point of view
container = '$here/pyp.sif'

# fast storage for temporary files, ideally local to the compute node
scratch = '/tmp/pyp'


[web]

# storage space for website files, database, etc
# for best performance, this should be on a filesystem local to the web server
localDir = '$localDir'

# storage space for files shared between the web server and the SLURM cluster
# this area should have a lot of available space for large files
sharedDir = '$sharedDir'

# directories for workflow files
workflowDirs = ['$workflowDir']

# authentication mode: how to log into the website
# disable authentication entirely in single-user mode
auth = "none"

EOF
  echo "Created configuration file: $configPath"
fi

# make sure others can't write to the config file
chmod o-w "$configPath"


echo "Installing integrations with systemd ..."

# relevant documentation on systemd:
# https://www.freedesktop.org/software/systemd/man/systemd.unit.html
# https://www.freedesktop.org/software/systemd/man/systemd.exec.html
# https://www.freedesktop.org/software/systemd/man/systemd.service.html


# make the unit file for the application server
appDaemon="nextPYP"
appFile="/lib/systemd/system/$appDaemon.service"
cat << EOF > "$appFile"
[Unit]
Description=$appDaemon

[Service]
Type=forking
Restart=always
RestartSec=1
WorkingDirectory=$here
User=$username
Environment=PYP_CONFIG=$configPath PYP_HOSTPROCESSOR_CLEAN=yup
ExecStart=/usr/bin/nextpyp-start
ExecStop=/usr/bin/nextpyp-stop

[Install]
WantedBy = multi-user.target
EOF
chmod go-w "$appFile"


# poke systemd to recognize the new daemons
systemctl daemon-reload

# start the demon now and at boot too
systemctl start $appDaemon
systemctl enable $appDaemon


echo "Finished installing nextPYP $version"
