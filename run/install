#!/bin/sh

# exit the installer if any command fails
set -e


# check for a testing override for the file download
if [ -n "$PYP_DIST" ]; then

  if [ ! -d "$PYP_DIST" ]; then
    echo "Folder not found: $PYP_DIST"
    exit 1
  fi

  version="testing"

else

  # release mode: download files from the public URL

  # build-time settings (to be filled in by a build script)
  version="__TARGET_VERSION__"

  # check that the build process actually ran
  tva=__TARGET
  tvb=_VERSION__
  if [ "$version" = "$tva$tvb" ]; then
    echo "No version set by the build process."
    exit 1
  fi
fi


# gather info about the local environment
here=$(pwd)

echo "Installing nextPYP $version at: $here"

hereLocalDir="$here/local"
hereSharedDataDir="$here/shared"
hereSharedExecDir="$here/sharedExec"


folder_owner() { #(path)
  stat -c '%U' -L "$1"
}
folder_group() { #(path)
  stat -c '%G' -L "$1"
}

storage_capacity() { #(path)
  df -Pk "$1" | tail -n 1 | awk '{print $2}'
}

storage_free_space() { #(path)
  df -Pk "$1" | tail -n 1 | awk '{print $4}'
}

kib_to_gib() { #(kib)
  echo "$1" | awk '{ printf "%.1f", $1 / 1024 / 1024 }'
}

check_capacity() { #(path, pathDesc, minKiB, minDesc, settingName, overrideName)
  capacityKiB=$(storage_capacity "$1")
  if [ "$capacityKiB" -lt "$3" ]; then
    capacityGiB=$(kib_to_gib "$capacityKiB")
    echo "WARNING: $1 is on a storage device with less than $4 of total capacity."
    echo "         It has $capacityGiB GiB total capacity."
    echo "         You can install nextPYP using this location for the '$2' folder,"
    echo "         but you may run out of space after a while."
    echo ""
    echo "         To choose another location for the '$2' folder that has more capacity,"
    echo "         use the $5 installation option."
    echo ""
    echo "         Or, to install here anyway, override this warning by adding the following option"
    echo "         to your installation command:"
    echo "           $6=true"
    exit 1
  fi
}


hereOwner=$(folder_owner "$here")


# determine what capabilities we have
whoami=$(whoami)
if [ "$whoami" = "root" ]; then

  admin="$SUDO_USER"

  echo "Installing in root mode (admin=$admin): Will integrate with OS"
  oscaps="root"

  # get the username for the service account
  if [ -n "$PYP_USER" ]; then
    username="$PYP_USER"
  # no username explicitly set: try to get it from the shared folder
  elif [ -d "$hereSharedDataDir" ]; then
    username=$(folder_owner "$hereSharedDataDir")
    echo "Found existing nextPYP service account $username"
  else
    echo "No PYP_USER set."
    exit 1
  fi

  # get the groupname for the service account
  if [ -n "$PYP_GROUP" ]; then
    groupname="$PYP_GROUP"
  # no groupname explicitly set: try to get it from the shared folder
  elif [ -d "$hereSharedDataDir" ]; then
    groupname=$(folder_group "$hereSharedDataDir")
    echo "Found existing nextPYP service group $groupname"
  # see if the username is also a valid groupname
  elif getent group "$username" > /dev/null; then
    groupname=$username
  else
    echo "Service account $username is not a valid group."
    echo "Choose the nextPYP service group by setting PYP_GROUP."
    exit 1
  fi

  # make sure the service account doesn't own the installation folder
  if [ "$hereOwner" != "root" ] && [ "$hereOwner" != "$admin" ]; then
    echo "ERROR: The installation folder is owned by $hereOwner,"
    echo "       but it should be owned by root or the administrator $admin"
    exit 1
  fi

  echo "Installing for service account $username in group $groupname ..."

  # install binaries to the OS bin dir
  bindir=/usr/bin

  # get the home folder for the serivce account
  home=$(getent passwd "$username" | cut -d: -f6)

else

  echo "Installing in user mode: Will not integrate with OS"
  oscaps="user"

  username="$whoami"
  groupname="$username"

  echo "Installing as current account $username ..."

  # "install" binaries here
  bindir="$here"

  home="$HOME"

  # if doing a new install, use here as the storage folder
  # assume the install is new if there's no local folder here
  if [ ! -e "$hereLocalDir" ]; then
    PYP_STORAGE="$here"
  fi
fi


# NOTE: shared logic with uninstall script: keep in sync!
folder_owner_type() { #(owner), reads: admin, username
  if [ "$1" = "root" ]; then
    echo "root"
  elif [ "$1" = "$admin" ]; then
    echo "admin"
  elif [ "$1" = "$username" ]; then
    echo "service"
  else
    echo "other"
  fi
}

# NOTE: shared logic with uninstall script: keep in sync!
folder_do() { #(path), reads: admin, oscaps, username
  owner=$(folder_owner "$1")
  if [ "$oscaps" = "root" ]; then
    type=$(folder_owner_type "$owner")
    if [ "$type" = "root" ]; then
      echo
    elif [ "$type" = "admin" ]; then
      echo sudo -u "$admin"
    elif [ "$type" = "service" ]; then
      echo sudo -u "$username"
    else
      # some other user: this is an error
      >&2 echo "ERROR: folder $1 owned by unrecognized user $owner"
      exit 1
    fi
  else
    if [ "$owner" = "$username" ]; then
      echo
    else
      >&2 echo "ERROR: folder $1 owned by some other user $owner, instead of you: $username"
      exit 1
    fi
  fi
}


hereDo=$(folder_do "$here")


mkdir_owned() { #(path, owner, group, chmod ops); reads oscaps, admin, username

  # look for an existing folder first
  if [ -d "$1" ]; then
    echo "Using existing folder $1"

    # check ownership tho
    folderOwner=$(folder_owner "$1")
    if [ "$folderOwner" != "$2" ]; then
      echo "ERROR: existing folder $1 is owned by $folderOwner, but it should be owned by $2"
    fi

  else

    # folder doesn't exist: we need to create it
    # why, oh why is creating folders so difficult?!? T_T

    parent=$(dirname "$1")
    parentOwner=$(folder_owner "$parent")

    if [ "$oscaps" = "root" ]; then
      parentType=$(folder_owner_type "$parentOwner")
      if [ "$parentType" = "root" ]; then

        # if a folder is owned by root, then things like chown should work normally
        mkdir "$1"
        if [ "$2" != "root" ]; then
          chown "$2:$3" "$1"
        fi
        if [ -n "$4" ]; then
          chmod "$4" "$1"
        fi

      elif [ "$parentType" = "admin" ]; then

        if [ "$2" = "root" ]; then

          echo "ERROR: can't create folder owned by root in a folder owned by an admin"
          exit 1

        elif [ "$2" = "$admin" ]; then

          # can just create folder as admin
          sudo -u "$admin" mkdir "$1"
          if [ -n "$4" ]; then
            sudo -u "$admin" chmod "$4" "$1"
          fi

        elif [ "$2" = "$username" ]; then

          # if a folder is owned by admin and we need the folder to be owned by the service account,
          # then chown might not work (networked filesystems, etc)
          # so we have to resort to temporary permission tricks

          # first, backup the parent folder permissions and allow write access to others
          backup=$(stat --format '%a' "$parent")
          sudo -u "$admin" chmod go+wx "$parent"

          # then, create the folder as the service account
          sudo -u "$username" mkdir "$1"

          # restore the original permissions
          sudo -u "$admin" chmod "$backup" "$parent"

          if [ -n "$4" ]; then
            sudo -u "$username" chmod "$4" "$1"
          fi

        else
          echo "ERROR: unrecognized target owner $2"
          exit 1
        fi

      elif [ "$parentType" = "service" ]; then

        if [ "$2" = "$username" ]; then

          # easy peasy
          sudo -u "$username" mkdir "$1"
          if [ -n "$4" ]; then
            sudo -u "$username" chmod "$4" "$1"
          fi

        else
          echo "ERROR: can't create folder owned by $2 in a folder owned by the service account"
          exit 1
        fi

      else
        # some other user: this is an error
        echo "ERROR: folder $1 owned by unrecognized user $parentOwner"
        exit 1
      fi

    else # oscaps = "user"

      if [ "$parentOwner" = "$username" ]; then

        # all we can do here is be a regular user
        mkdir "$1"
        if [ -n "$4" ]; then
          chmod "$4" "$1"
        fi

      else
        echo "ERROR: folder $1 owned by some other user $parentOwner, instead of you: $username"
        exit 1
      fi

    fi

    echo "Created folder $1"
  fi
}


if [ "$oscaps" = "root" ]; then

  # in root mode, save the installation folder somewhere canonical, so we can find it again later
  canondir="/opt/nextpyp"
  if [ "$here" = "$canondir" ]; then
    # as luck would have it, we're already installing into the canonical location
    true
  elif [ -L "$canondir" ]; then
    # already a symbolic link here, overwrite it
    rm "$canondir"
    ln -s "$here" "$canondir"
  elif [ -e "$canondir" ]; then
    # something else installed here, panic!
    echo "Failed to create installdir symlink at $canondir, something else already exists there"
    exit 1
  else
    # nothing in canondir yet, create the link
    ln -s "$here" "$canondir"
  fi
fi


# look for storage folder settings, which creates the other folders as sub-folders
if [ -n "$PYP_STORAGE" ]; then

  # check existence
  if [ ! -d "$PYP_STORAGE" ]; then
    echo "ERROR: Storage folder given by PYP_STORAGE not found"
    echo "       PYP_STORAGE=$PYP_STORAGE"
    exit 1
  fi

  storageDir="$PYP_STORAGE"
  echo "Installing storage to folder: $storageDir"

  # check ownership of the storage folder
  storageOwner=$(folder_owner "$storageDir")
  storageGroup=$(folder_group "$storageDir")
  echo "  user=$storageOwner   group=$storageGroup"
  if [ "$oscaps" = "root" ]; then
    if [ "$storageOwner" != "root" ] && [ "$storageOwner" != "$admin" ]; then
      echo "ERROR: The storage folder is owned by $storageOwner,"
      echo "       but it should be owned by root or the administrator $admin"
      exit 1
    fi
  else # oscaps = "user"
    if [ "$storageOwner" != "$username" ]; then
      echo "ERROR: The storage folder is owned by $storageOwner,"
      echo "       but it should be owned your account $username"
      exit 1
    fi
  fi

  # check the size of the storage device hosting this folder, if needed
  # want at least 1 TiB total capacity (which is 1073741824 KiB-sized blocks)
  if [ -z "$PYP_STORAGE_OK" ]; then
    check_capacity "$storageDir" "storage" "1073741824" "one terrabyte" "PYP_STORAGE" "PYP_STORAGE_OK"
  fi

  # define all the other folders as sub-folders of the storage folder

  PYP_LOCAL="$storageDir/local"
  mkdir_owned "$PYP_LOCAL" "$username" "$groupname" "u=rwx,g=rxs,o=rx"

  PYP_SHARED_DATA="$storageDir/shared"
  mkdir_owned "$PYP_SHARED_DATA" "$username" "$groupname" "u=rwx,g=rxs,o=rx"

  PYP_SHARED_EXEC="$storageDir/sharedExec"
  mkdir_owned "$PYP_SHARED_EXEC" "$storageOwner" "" "u=rwx,g=rxs,o=rx"

  PYP_SCRATCH="$storageDir/scratch"
  mkdir_owned "$PYP_SCRATCH" "$username" "$groupname" "u=rwx,g=rxs,o=rx"

fi


update_local_symlink() { #(src, target) reads: here, hereDo
  if [ -L "$2" ]; then
    # existing entry is a symlink: delete it so we can overwrite it
    $hereDo rm "$2"
    $hereDo ln -s "$1" "$2"
  elif [ -d "$2" ]; then
    # existing entry is a real folder: no symlink needed
    true
  elif [ -e "$2" ]; then
    echo "ERROR: Can't create symlink at $2 because something already exists there"
    exit 1
  else
    # nothing there yet: can create the symlink now
    $hereDo ln -s "$1" "$2"
  fi
}


# init the local folder
if [ -n "$PYP_LOCAL" ]; then

  # check existence
  if [ ! -d "$PYP_LOCAL" ]; then
    echo "ERROR: Local folder given by PYP_LOCAL not found"
    echo "       PYP_LOCAL=$PYP_LOCAL"
    exit 1
  fi

  # check ownership
  localOwner=$(folder_owner "$PYP_LOCAL")
  if [ "$localOwner" != "$username" ]; then
    echo "ERROR: Local folder given by PYP_LOCAL should be owned by $username"
    echo "       Instead it's owned by $localOwner"
    echo "       PYP_LOCAL=$PYP_LOCAL"
    exit 1
  fi

  localDir="$PYP_LOCAL"
  echo "Using local folder: $localDir"
  update_local_symlink "$localDir" "$hereLocalDir"

# look for a folder from a previous installation
elif [ -L "$hereLocalDir" ]; then

  localDir="$(readlink "$hereLocalDir")"
  echo "Found previous local folder at: $localDir"

elif [ -d "$hereLocalDir" ]; then

  localDir="$hereLocalDir"
  echo "Found previous local folder here: $localDir"

else

  # no folder given and no previous folder: create a folder inside the installation folder
  localDir="$hereLocalDir"

  # check the size of the storage device, if needed
  # want at least 100 GiB (which is 104857600 KiB-sized blocks)
  if [ -z "$PYP_HERE_OK" ]; then
    check_capacity "$here" "install" "104857600" "one hundred gigabytes" "PYP_LOCAL" "PYP_HERE_OK"
  fi

  mkdir_owned "$localDir" "$username" "$groupname" "u=rwx,g=rxs,o=rx"
fi


# init the shared data folder
if [ -n "$PYP_SHARED_DATA" ]; then

  # check existence
  if [ ! -d "$PYP_SHARED_DATA" ]; then
    echo "ERROR: Shared folder given by PYP_SHARED_DATA not found"
    echo "       PYP_SHARED_DATA=$PYP_SHARED_DATA"
    exit 1
  fi

  # check ownership
  sharedOwner=$(folder_owner "$PYP_SHARED_DATA")
  if [ "$sharedOwner" != "$username" ]; then
    echo "ERROR: Shared folder given by PYP_SHARED_DATA should be owned by $username"
    echo "       Instead it's owned by $sharedOwner"
    echo "       PYP_SHARED_DATA=$PYP_SHARED_DATA"
    exit 1
  fi

  sharedDataDir="$PYP_SHARED_DATA"
  echo "Using shared data folder: $sharedDataDir"
  update_local_symlink "$sharedDataDir" "$hereSharedDataDir"

# look for a folder from a previous installation
elif [ -L "$hereSharedDataDir" ]; then

  sharedDataDir="$(readlink "$hereSharedDataDir")"
  echo "Found previous shared data folder at: $sharedDataDir"

elif [ -d "$hereSharedDataDir" ]; then

  sharedDataDir="$hereSharedDataDir"
  echo "Found previous shared data folder here: $sharedDataDir"

else

  # NOTE: we should only hit this case in a cluster installation
  echo "ERROR: either PYP_STORAGE (for desktop workstations) or PYP_SHARED_DATA (for compute clusters) are required"
  exit 1
fi


# make the shared exec folder, or use the one given
if [ -n "$PYP_SHARED_EXEC" ]; then

  # check existence
  if [ ! -d "$PYP_SHARED_EXEC" ]; then
    echo "ERROR: Shared exec folder given by PYP_SHARED_EXEC not found"
    echo "       PYP_SHARED_EXEC=$PYP_SHARED_EXEC"
    exit 1
  fi

  # check ownership, if useful (can't enforce admin ownership when there's no admin, ie in unprivileged user mode)
  if [ "$oscaps" = "root" ]; then
    sharedExecOwner=$(folder_owner "$PYP_SHARED_EXEC")
    if [ "$sharedExecOwner" != "root" ] && [ "$sharedExecOwner" != "$admin" ]; then
      echo "ERROR: Shared exec folder given by PYP_SHARED_EXEC should be owned by root or $admin"
      echo "       Instead, it is owned by $sharedExecOwner"
      echo "       PYP_SHARED_EXEC=$PYP_SHARED_EXEC"
      exit 1
    fi
  fi

  sharedExecDir="$PYP_SHARED_EXEC"
  echo "Using shared exec folder: $sharedExecDir"
  update_local_symlink "$sharedExecDir" "$hereSharedExecDir"

# look for a folder from a previous installation
elif [ -L "$hereSharedExecDir" ]; then

  sharedExecDir="$(readlink "$hereSharedExecDir")"
  echo "Found previous shared exec folder at: $sharedExecDir"

elif [ -d "$hereSharedExecDir" ]; then

  sharedExecDir="$hereSharedExecDir"
  echo "Found previous shared exec folder here: $sharedExecDir"

elif [ "$oscaps" = "user" ]; then

  # we only get here if we're upgrading from pre-v0.7.0 in user mode
  # so we make a new shared exec dir under the install dir
  sharedExecDir="$hereSharedExecDir"
  mkdir_owned "$sharedExecDir" "$username" "" "u=rwx,g=rxs,o=rx"

else

  # NOTE: we should only hit this case in a cluster installation
  echo "ERROR: PYP_SHARED_EXEC is a required option"
  exit 1
fi

sharedExecDo=$(folder_do "$sharedExecDir")


# NOTE: The base folders have setgid (g+s) so all files inherit the service account group.
#       Setgid will propagate automatically to all subfolders when they're created,
#       so we don't need to re-set it for every folder.

# make the local sub-folders
mkdir_owned "$localDir/containers" "$username" "$groupname"
mkdir_owned "$localDir/logs" "$username" "$groupname"
mkdir_owned "$localDir/db" "$username" "$groupname"
mkdir_owned "$localDir/sock" "$username" "$groupname" ugo=rwx,+t

# make the shared sub-folders
mkdir_owned "$sharedDataDir/batch" "$username" "$groupname" ugo=rwx,+t
mkdir_owned "$sharedDataDir/log" "$username" "$groupname" ugo=rwx,+t
mkdir_owned "$sharedDataDir/users" "$username" "$groupname"
mkdir_owned "$sharedDataDir/os-users" "$username" "$groupname" ugo=rwx,+t
mkdir_owned "$sharedDataDir/sessions" "$username" "$groupname"
mkdir_owned "$sharedDataDir/groups" "$username" "$groupname"

# The user-processors folder needs some special care, since it houses set-uid executables:
# The folder should be owned by the service account, and the service group.
# But we need to explicitly set the service group for this folder, since the group might
# be something other than the service group chosen in this installer by default,
# ie, the parent folder's group, or the service account's default group.
# And it is *vitally* important the user-processors folder have the tmpdir bit set,
# so the service account can't overwrite the users' executables.
userProcessorsDir="$sharedDataDir/user-processors"
mkdir_owned "$userProcessorsDir" "$username" "$groupname" ugo=rwx,+t

updirGroup=$(folder_group "$userProcessorsDir")
if [ "$updirGroup" != "$groupname" ]; then
  echo "WARNING: User-processors folders is owned by group $updirGroup"
  echo "         but it should be owned by $groupname instead. Attemping to fix ..."
  $sharedExecDo chown ":$groupname" "$userProcessorsDir"
fi


# make the shared exec sub-folders
sharedExecOwner=$(folder_owner "$sharedExecDir")
mkdir_owned "$sharedExecDir/containers" "$sharedExecOwner" ""


# configure downloads
www="https://nextpyp.app/files/pyp/$version"
wget --help | grep -q '\--show-progress' && _PROGRESS_OPT="-q --show-progress" || _PROGRESS_OPT=""
wgetopts="-nv $_PROGRESS_OPT"
# for interactive use, it's helpful to turn on the progress bar to track long downloads
#wgetopts="$wgetopts --progress=bar"

download() { #(do, filename, todir, chmod vops)
  if [ -n "$PYP_DIST" ]; then
    # copy distribution files from the local path
    echo "Copying $3/$2 ..."
    $1 cp "$PYP_DIST/$2" "$3/$2"
  else
    # otherwise, download from the URL
    $1 wget $wgetopts -O "$3/$2" "$www/$2"
  fi
  $1 chmod "$4" "$3/$2"
}

# download the distribution files
if [ -n "$PYP_DIST" ]; then
  echo "Copying installation files from $PYP_DIST ..."
else
  echo "Downloading installation files from $www ..."
fi

download "$hereDo" "nextPYP.sif" "$here" u=rw,go=r
download "$hereDo" "host-processor" "$here" u=rw,go=r
download "$hereDo" "user-processor" "$here" u=rw,go=r
download "$hereDo" "nextpyp" "$here" u=rw,go=r
download "$hereDo" "uninstall" "$here" u=rw,go=r
download "$hereDo" "install-rprox" "$here" u=rw,go=r

# NOTE: we don't make the local scripts (eg other installers/uninstallers) in $here executable
#       instead, the installation instructions ask the user to inspect them first
#       and then chmod +x later if satisfied


# download large container files
download "$sharedExecDo" "pyp.sif" "$sharedExecDir/containers" u=rw,go=r

# download the workflow files
workflowDir="$here/workflows"
mkdir_owned "$workflowDir" "$hereOwner" "" u=rwx,go=rx
download "$hereDo" "workflows/spr_tutorial.toml" "$here" u=rw,go=r
download "$hereDo" "workflows/tomo_tutorial.toml" "$here" u=rw,go=r
download "$hereDo" "workflows/class_tutorial.toml" "$here" u=rw,go=r


install() { #(filename, dest filename)
  if [ -n "$2" ]; then
    dstname="$2"
  else
    dstname="$1"
  fi
  # move the executables into the binaries dir (eg /usr/bin so SELinux won't deny access)
  outpath="$bindir/$dstname"
  if [ "$here/$1" != "$outpath" ]; then
    cp -f "$here/$1" "$outpath"
    rm "$here/$1"
  fi
  chmod u=rwx,go=rx "$outpath"
}

# install executables
install "nextpyp"
install "host-processor" "nextpyp-host-processor"


# create the home configuration folder, if needed (apptainer needs it)
if [ "$oscaps" = "root" ]; then
  if [ ! -d "$home" ]; then
    echo "Service account has no home folder, attempting to create automatically ..."
    echo "If automatic home folder creation fails, create the home folder manually and try installing again."
    mkdir_owned "$home" "$username" "$groupname" u=rwx,g=rxs,o=rx
  else
    echo "Home folder for service account already exists: $home"
  fi
  mkdir_owned "$home/.config" "$username" "$groupname" u=rwx,g=rxs,o=rx
fi


hereConfigPath="$here/config.toml"
configPath="$sharedExecDir/config.toml"

# if a config file exists in the old location, move it to the new one
if [ -f "$hereConfigPath" ] && [ ! -L "$hereConfigPath" ]; then
  echo "Found config file in old location: $hereConfigPath"
  $sharedExecDo cp "$hereConfigPath" "$configPath"
  $hereDo rm "$hereConfigPath"
  $hereDo ln -s "$configPath" "$hereConfigPath"
  echo "Moved config file to new location: $configPath"
fi

# generate the initial configuration, if needed
if [ -f "$configPath" ]; then
  echo "Using existing configuration file: $configPath"
else

  # prep the scratch folder
  if [ -n "$PYP_SCRATCH" ]; then

    # TODO: these checks will probably fail on the web server when using SLURM,
    #       but these checks are still very valid and useful in standalone mode,
    #       but the installer isn't smart enough to know if SLURM or standalone (yet),
    #       so we'll just have to skip these checks entirely for now. =(
    
#    # check existence
#    if [ ! -d "$PYP_SCRATCH" ]; then
#      echo "ERROR: Folder given by PYP_SCRATCH not found"
#      echo "       PYP_SCRATCH=$PYP_SCRATCH"
#      exit 1
#    fi
#
#    # check ownership
#    scratchOwner=$(folder_owner "$PYP_SCRATCH")
#    if [ "$scratchOwner" != "$username" ]; then
#      echo "ERROR: Scratch folder given by PYP_SCRATCH should be owned by $username"
#      echo "       Instead it's owned by $scratchOwner"
#      echo "       PYP_SCRATCH=$PYP_SCRATCH"
#      exit 1
#    fi

    scratchDir="$PYP_SCRATCH"

  else
    # NOTE: we should only hit this case in a cluster installation
    echo "ERROR: PYP_SCRATCH is a required setting"
    exit 1
  fi

  $sharedExecDo tee "$configPath" > /dev/null << EOF

[pyp]

# fast storage for temporary files, ideally local to the compute node
scratch = '$scratchDir'

# add folder paths into this list to make your data visible to nextPYP
binds = []


[web]

# Storage space for website files, database, etc.
# For best performance, this should be on a filesystem local to the web server.
localDir = '$localDir'

# Storage space for files shared between the web server and the data processing jobs.
# This area should have a lot of available space for large files
# and should be writable by the account running nextpyp.
sharedDir = '$sharedDataDir'

# Storage space for the executables needed by data processing jobs,
# and the configuration (like this file) shared between the web server and the data processing jobs.
# This area should be read-only to the account running nextpyp.
sharedExecDir = '$sharedExecDir'

# directories for workflow files
workflowDirs = ['$workflowDir']

# authentication mode: how to log into the website
# disable authentication entirely in single-user mode
auth = "none"

EOF
  echo "Created configuration file: $configPath"
  $hereDo ln -s "$configPath" "$hereConfigPath"
fi

# make sure others can't write to the config file
$sharedExecDo chmod ug=rw,o=r "$configPath"


# do some testing to see if we need to do any manual post-installation steps

# assume if the pyp container is in the old location, then we're upgrading from v0.6.5 to v0.7.0 (or newer)
hasOldContainer=1
[ -f "$here/pyp.sif" ] && hasOldContainer=0
if [ "$hasOldContainer" = 0 ]; then
  echo "Found old container file from v0.6.5 or earlier"
fi

needsPostUpgradeSteps=$hasOldContainer


if [ "$oscaps" = "root" ]; then
  echo "Installing integrations with systemd ..."

  # relevant documentation on systemd:
  # https://www.freedesktop.org/software/systemd/man/systemd.unit.html
  # https://www.freedesktop.org/software/systemd/man/systemd.exec.html
  # https://www.freedesktop.org/software/systemd/man/systemd.service.html


  # make the unit file for the application server
  appDaemon="nextPYP"
  appFile="/lib/systemd/system/$appDaemon.service"
  tee "$appFile" > /dev/null << EOF
[Unit]
Description=$appDaemon

[Service]
Type=forking
Restart=always
RestartSec=1
User=$username
ExecStart=$bindir/nextpyp start
ExecStop=$bindir/nextpyp stop

[Install]
WantedBy = multi-user.target
EOF
  chmod go-w "$appFile"


  # poke systemd to recognize the new daemon
  systemctl daemon-reload

  # set the service to start at boot
  systemctl enable $appDaemon

  if [ "$needsPostUpgradeSteps" != 0 ]; then

    # (try to) start the demon now
    if ! systemctl start $appDaemon; then
      echo "ERROR: Looks like nextPYP failed to start the first time."
      echo "       The first place to look for information is the systemd logs."
      echo "       You can do that with:"
      echo "         sudo journalctl -e -u nextPYP"
      echo "       If there's no useful information there, the next place to look is the init log:"
      echo "         cat \"$localDir/logs/init.log\""
      echo "       If there's no useful in formation there, the next place to look is the supervisord log:"
      echo "         cat \"$localDir/logs/superd\""
      echo "       Finally, the last place to look for error information is the website log:"
      echo "         tail -n 200 \"$localDir/logs/micromon\""
      echo "       If any of the above log files are missing, it means nextPYP never reached that stage of the startup procedure."
      exit 1
    fi

    # seems to be running ok, show the status
    systemctl --no-pager --full status $appDaemon

  fi

else
  echo "NOTE: Since you did not run the installer as root, nextPYP will not start automatically"
  echo "      To start manually, run: \"$here/nextpyp\" start"
  echo "      To stop nextPYP, run: \"$here/nextpyp\" stop"
fi

echo ""
echo "Finished installing nextPYP $version !"


# show any post-upgrade steps, if needed

if [ "$hasOldContainer" = 0 ]; then
  echo ""
  echo "==============================================================================="
  echo "|  BUT WAIT! There's still a bit more you need to do                          |"
  echo "|-----------------------------------------------------------------------------|"
  echo "|                                                                             |"
  echo "| This install script won't delete files or change your configuration file,   |"
  echo "| so you'll have to do a few steps manually.                                  |"
  echo "|                                                                             |"
  echo "| The old pyp container file is no longer used and should be deleted:         |"
  echo "|   rm \"$here/pyp.sif\""
  echo "|                                                                             |"
  echo "| Make a couple changes to your configuration file, at:                       |"
  echo "|   $configPath"
  echo "|                                                                             |"
  echo "| 1. Delete the 'pyp.container' option. It's no longer used.                  |"
  echo "|                                                                             |"
  echo "| 2. Under the [web] section,                                                 |"
  echo "|    add the path to the new folder for shared executables and configuration: |"
  echo "|       sharedExecDir = \"$sharedExecDir\""
  echo "|                                                                             |"
  echo "| When you've completed these steps, start nextPYP again.                     |"
  echo "| nextPYP will fail to start until these steps have been completed.           |"
  echo "==============================================================================="
fi
