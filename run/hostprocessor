#!/bin/bash

echo "HostProcessor started"


pidpath="/tmp/micromon.hostprocessor.pid"
pipepath="/tmp/micromon.hostprocessor.pipe"


# make sure the named pipe is ready
if [ ! -p "$pipepath" ]; then
  echo "Named pipe does not exist at $pipepath"
  exit 1
fi


# tell the world the host processor is running
echo "$$" > "$pidpath"

# clean up the pid file and the pipe when done
trap 'echo "HostProcessor exited"; rm "$pidpath"; rm "$pipepath"' EXIT


# listen for commands on the named pipe
while :; do

  # wait for the next command and then read it
  read -r cmdtype cmdbody < "$pipepath"

  # what did we get?
  echo "cmd type=$cmdtype, body=$cmdbody"

  # process the command
  case "$cmdtype" in

    # empty command, skip it
    "");;


    # launch a new process
    "exec")

      # split the command body into outpath and commands
      read -r cmdout cmdcmds <<EOF
$cmdbody
EOF

      # launch the command in a shell
      /bin/sh -c "$cmdcmds" > "$cmdout" 2>&1 &

      # respond with the pid
      cmdpid=$!
      echo "Started job with PID=$cmdpid"
      echo "$cmdpid" > "$pipepath"
    ;;


    # check on the status of a previously-launched process
    "status")

      # return the process status
      # the cmdbody is the pid
      status=$(grep "^State:\s" < "/proc/$cmdbody/status")
      echo "$status" > "$pipepath"
    ;;


    # kill a previously-launched process
    "kill")

      # the cmdbody is the pid
      # NOTE: by default, `kill` sends SIGTERM
      kill "$cmdbody"

      # send some kind of response back
      echo "ok" > "$pipepath"
    ;;


    # lookup the username for a uid
    "username")
      id -un "$cmdbody" > "$pipepath"
    ;;


    # lookup the uid for a username
    "uid")
      id -u "$cmdbody" > "$pipepath"
    ;;


    # lookup the groupname for a gid
    "groupname")
      id -gn "$cmdbody" > "$pipepath"
    ;;


    # lookup the gid for a groupname
    "gid")
      id -g "$cmdbody" > "$pipepath"
    ;;


    # lookup the gids for a uid
    "gids")
      id -G "$cmdbody" > "$pipepath"
    ;;


    *)
      echo "unrecognized command type: $cmdtype"
    ;;

  esac

done

echo "HostProcessor finished"
