#!/bin/bash
# NOTE: need bash proper here instead of POSIX shell so we can build commands with quoted args properly


# exit if any command fails
set -e


# look for the config file in the usual places
# first try the environment
configpath=$(realpath "$PYP_CONFIG" || echo "")
defaultpath=~/.pyp/config.toml
if [ -z "$configpath" ] || [ ! -f "$configpath" ] ; then
  # then look in the default location
  configpath=$defaultpath
fi
if [ -z "$configpath" ] || [ ! -f "$configpath" ] ; then
  echo "no configuration file found!"
  echo "checked PYP_CONFIG=$PYP_CONFIG"
  echo "and $defaultpath"
  exit 1
fi
echo "Using configuration at $configpath"

# set the config file path (on the host) to another environment variable so processes inside the container can see it
# useful for spawning new containers from inside the container
export PYP_CONFIG_HOST=$configpath


# this shell script doesn't know how to parse the TOML config file
# but the Kotlin code inside the container does
# so use the container to parse the config file and check for errors
# but send the directories back here to the shell script for validation
# since the conainer can't check external directories without binds, which we haven't done yet

# create binds to map the config file into the container
# must bind the config file to a canonical path so it doesn't conflict with any of the bind folders
binds=(--bind "$configpath":/var/micromon/config.toml)

addbind() #(host path, container path)
{
  if [ -n "$2" ] ; then
    binds+=(--bind "$1:$2")
  else
    binds+=(--bind "$1")
  fi
}

binddevdir() #(host path, container path, allow missing)
{
  if [ -d "$1" ] ; then
    echo "using development folder at: \"$1\""
    addbind "$1" "$2"
  else
    if [ -z "$3" ] ; then
      echo "Error: development folder not found at \"$1\""
      exit 1
    fi
  fi
}

binddevfile() #(host path, container path)
{
  if [ -f "$1" ] ; then
    echo "using development file at: \"$1\""
    addbind "$1" "$2"
  else
    echo "Error: development file not found at \"$1\""
    exit 1
  fi
}

setupdev()
{
  devpath=$1
  devgradlecache=$2
  devmain=$3

  # handle development binds if needed
  if [ -n "$devpath" ] ; then
    echo "looking for development files at \"$devpath\" ..."

    binddevdir "$devgradlecache"

    if [ "$devmain" == "run" ] ; then

      # for the website, bind the libs and start scripts
      binddevdir "$devpath/build/libs" "/opt/micromon/libs"
      binddevfile "$devpath/config/init.sh" "/opt/micromon/init.sh"
      binddevfile "$devpath/config/micromon.sh" "/opt/micromon/bin/micromon.sh"

    elif [ "$devmain" == "test" ] ; then

      # for tests, bind the classes and resource dirs directly
      binddevdir "$devpath/build/classes/kotlin/backend/main" "/opt/micromon/classes/main"
      binddevdir "$devpath/build/processedResources/backend/main" "/opt/micromon/resources/main"
      binddevdir "$devpath/build/classes/kotlin/backend/test" "/opt/micromon/classes/test"
      binddevdir "$devpath/build/processedResources/backend/test" "/opt/micromon/resources/test" true
      # this folder ^^ might really not exist, so it missing is not an error
    fi

    binddevfile "$devpath/build/classpath.dev.$devmain.txt" "/opt/micromon/bin/classpath.txt"

    # use the pyp args config too, if it's available
    binddevfile "$PYP_SRC/config/pyp_config.toml" "/opt/micromon/pyp_config.toml" true

    # pick the host processor executable
    hpexec="$devpath/run/host-processor"
    hpoptions=(--log host_processor=trace)

    # turn on extra logging
    NEXTPYP_LOGS=dev
  
    # set the "installation" folder to the project's run folder
    installdir="$devpath/run"
  fi
}


find_install() #(home)
{
  # look for the install dir using the config link
  configlink="$1/.config/nextpyp/installdir"
  if [ -L "$configlink" ] ; then
    installdir=$(readlink "$configlink")
    echo "Found installation folder: $installdir"
  else
    echo "Failed to find installation folder: missing configuration symlink: $configlink"
    exit 1
  fi
}


find_install_root()
{
  # we're root, so we need to find the service account
  username=$PYP_USER
  if [ -z "$username" ]; then
    echo "Set PYP_USER to the service account name."
    exit
  fi

  find_install "$(getent passwd "$username" | cut -d: -f6)"
}


setup()
{
  # get the website container
  container="$installdir/nextPYP.sif"
  if [ ! -f "$container" ] ; then
    echo "Website container not found: $container"
    exit 1
  fi

  # build the command to run the CLI
  cli=(\
    singularity exec "${binds[@]}" --no-home "$container" \
    java \
    -Xmx64M \
    -Djava.awt.headless=true \
    -Dlogback.configurationFile=logback-cli.xml \
    @/opt/micromon/bin/classpath.txt \
    edu.duke.bartesaghi.micromon.CliKt \
  )

  echo "Reading config.toml using CLI tool ..."

  # get the local and share directories from the config
  localdir=$("${cli[@]}" localdir)
  shareddir=$("${cli[@]}" shareddir)

  # make sure the base directories exist
  if [ ! -d "$localdir" ] ; then
    echo "Local dir does not exist. It should have been created during installation"
    exit 1
  fi
  if [ ! -d "$shareddir" ] ; then
    echo "Shared dir does not exist. It should have been created during installation"
    exit 1
  fi

  addbind "$localdir"
  addbind "$shareddir"

  sockdir="$localdir/sock"

  # pick the host processor executable, if not already picked by the dev setup
  if [ -z "$hpexec" ] ; then
    if [ -x "/usr/bin/nextpyp-host-processor" ]; then
      hpexec="/usr/bin/nextpyp-host-processor"
    else
      hpexec="$installdir/host-processor"
    fi
    hpoptions=()
  fi
}


usersetup()
{
  # get the username
  username=$1
  if [ -z "$username" ]; then
    echo "Required argument: username"
    exit 1
  fi
  if [ "$username" = "root" ]; then
    echo "Root is not an allowed user"
    exit 1
  fi

  # make a way to run commands as the target user
  usdo="sudo -u $username"

  upexec="$shareddir/user-processors/user-processor-$username"
}


# process the command
case "$1" in

  start)

    # handle dev arguments, if any
    setupdev "$2" "$3" "$4"

    if [ -z "$installdir" ] ; then
      find_install "$HOME"
    fi
    setup

    # the shared folder needs to have other-exec permissions all the way up to /
    pushd "$shareddir" > /dev/null
    while true; do
      otherperms=$(stat --format=%A . | cut -c 10)
      groupperms=$(stat --format=%A . | cut -c 7)
      #echo "Check shared perms: $(pwd) => $perms"
      if [ "$otherperms" == '-' ] || [ "$groupperms" == '-' ]; then
        echo "Folder $(pwd) (and all parents of the shared folder) must have group and other execute permissions"
        popd > /dev/null
        namei -l "$shareddir"
        exit 1
      fi
      cd ..
      if [ "$(pwd)" == "/" ]; then
        break
      fi
    done
    popd > /dev/null


    # add all the binds from the config file
    configbinds=$("${cli[@]}" binds)
    declare -a configbinds="(${configbinds})"
    binds+=("${configbinds[@]}")


    # start the host processor unless explicitly asked not to
    if [ -z "$PYP_HOSTPROCESSOR_OFF" ]; then

      if [ ! -x "$hpexec" ]; then
        echo "Host processor executable not found, tried:"
        echo "  /usr/bin/nextpyp-host-processor"
        echo "  $installdir/host-processor"
        exit 1
      fi

      pushd "$sockdir"
      "$hpexec" "${hpoptions[@]}" > "$localdir/logs/hostprocessor" 2>&1 &
      hppid=$!
      echo "Host Processor started pid=$hppid"
      popd

    fi


    # bind the local sockets folder to a short path inside the container, since limits
    #	on socket paths in Linux are *FAR* less than limits on general paths (108 vs 255 bytes)
    # see: https://man7.org/linux/man-pages/man7/unix.7.html
    addbind "$sockdir" "/run/nextpyp/sock"


    echo "Configuring environment ..."

    # configure the environment
    NEXTPYP_LOCAL=$localdir
    export NEXTPYP_LOCAL
    NEXTPYP_HEAPMIB=$("${cli[@]}" heapmib)
    export NEXTPYP_HEAPMIB
    NEXTPYP_JMX=$("${cli[@]}" jmx)
    export NEXTPYP_JMX
    NEXTPYP_DATABASE_MEMGB=$("${cli[@]}" database_memgb)
    export NEXTPYP_DATABASE_MEMGB
    NEXTPYP_OOMDUMP=$("${cli[@]}" oomdump)
    export NEXTPYP_OOMDUMP
    NEXTPYP_HOSTPROCESSOR_PID=$hppid
    export NEXTPYP_HOSTPROCESSOR_PID
    export NEXTPYP_LOGS

    # set general args to apptainer
    #printf "\t%s\n" "${binds[@]}" # DEBUG
    apptainerargs=("${binds[@]}" --writable-tmpfs --no-home)

    # The website tries to query the number of available GPUs in standalone mode
    # so we need to get apptainer to bind in the GPU libraries.
    # We can just always ask apptainer to do it whether or not Cuda is even available on this host,
    # but apptainer will show scary warnings in the console if it's not.
    # Ideally, we'd only turn on --nv if we knew Cuda was available, but detecting that in a shell script
    # is likely to be imperfect, so just always turn it on and hope no one complains about the apptainer warnings.
    apptainerargs+=(--nv)
    echo "NOTE:    If you see warnings immediately below that nv files or libraries can't be found, and you're not using any GPUs, those warnings are safe to ignore."

    # set the container path
    apptainerargs+=("$container")

    # pass along all the binds in an environment variable so the container can use them to spawn copies of itself
    # but be sure to correctly quote paths, since they can contain all kinds of characters
    NEXTPYP_APPTAINER_ARGS="$(printf "%q " "${apptainerargs[@]}")"
    export NEXTPYP_APPTAINER_ARGS

    # finally, start the website container
    echo "Starting singularity container ..."
    if [ "$devmain" == "test" ]; then

      # ok to fail here, keep going so we can cleanup
      set +e

      # to run tests, don't start an instance, just exec a java command
      jvmargs=(\
        -Xmx2G \
        -Djava.awt.headless=true \
        -Dlogback.configurationFile=logback-test.xml \
        @/opt/micromon/bin/classpath.txt \
      )
      singularity exec "${apptainerargs[@]}" java "${jvmargs[@]}" edu.duke.bartesaghi.micromon.DevvmKt

      echo "apptainer/JVM exited, cleaning up ..."

      # if there's a host processor running, stop it
      if [ -n "$hppid" ] ; then
        kill -s TERM "$hppid"
        echo "Sent SIGTERM to host processor at pid=$hppid"
      fi

      echo "Cleanup finished!"

    else

      # start the production website instance
      singularity instance start "${apptainerargs[@]}" nextPYP
    fi

    ;;


  stop)

    # handle dev arguments, if any
    setupdev "$2" "$3" "$4"

    if [ -z "$installdir" ] ; then
      find_install "$HOME"
    fi
    setup

    # ok to fail here, keep going so we can cleanup
    set +e

    # stop the website container
    singularity instance stop nextPYP

    # stop any running user processors
    # NOTE: tragically, the JVM can't shut them down, so we'll have to do it here
    #       also, we need to stop them before stopping the host-processor
    #       otherwise, the user-processor will panic because stdout gets closed when the host-procesor exits
    for f in "$sockdir"/user-processor-*-* ; do
      if [ -S "$f" ] ; then
        IFS='-' read -r -a parts <<< "$(basename "$f")"
        pid=${parts[2]}
        username=${parts[3]}
        echo "Found user processor $pid for $username, sending SIGTERM"
        kill -s TERM "$pid"
      fi
    done

    # stop any running host processors
    for f in "$sockdir"/host-processor-* ; do
      # NOTE: if the glob matches nothing, the filename `host-processor-*` will be iterated
      #       sigh ... shells are so annoying to program
      if [ -S "$f" ] ; then
        IFS='-' read -r -a parts <<< "$(basename "$f")"
        pid=${parts[2]}
        echo "Found host processor $pid, sending SIGTERM"
        kill -s TERM "$pid"
      fi
    done

    ;;


  user-add)

    if [ "$(whoami)" != "root" ]; then
      echo "This utility should be run as root!"
      exit 1
    fi

    find_install_root
    setup
    usersetup "$2"

    # create the user-processor executable for this user
    $usdo cp "$installdir/user-processor" "$upexec"

    # only the user should be able to write
    # only the user and the group should be able to execute
    $usdo chmod u=rwx,g=rx,o= "$upexec"

    # the executable should be setuid
    # NOTE: set this last, so we're sure the executable has the correct permissions before turning on setuid
    $usdo chmod u+s "$upexec"

    echo "Added user: $2"

    ;;


  user-remove)

    if [ "$(whoami)" != "root" ]; then
      echo "This utility should be run as root!"
      exit 1
    fi

    find_install_root
    setup
    usersetup "$2"

    # remove the runas-username executable, if any
    if [ -f "$upexec" ]; then
      $usdo rm "$upexec"
    else
      echo "No user-processor executable found for user $username"
      exit 1
    fi

    echo "Removed user: $2"

    ;;


  *)
    echo "Usage:"
    echo "   nextpyp <start | stop>"
    echo "   or"
    echo "   sudo nextpyp <user-add | user-remove> <username>"
    exit 1
    ;;

esac
