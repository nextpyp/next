#!/bin/sh


# determine what capabilities we have
whoami=$(whoami)
if [ "$whoami" = "root" ]; then

  admin="$SUDO_USER"
  echo "Uninstalling in root mode (admin=$admin): Will remove OS integrations"
  oscaps="root"

  # remove installed binaries from the OS bin dir
  bindir=/usr/bin

else

  echo "Uninstalling in user mode: Will not look for OS integrations"
  oscaps="user"

  # remove "installed" binaries from here
  bindir="$installdir"

fi


# find the installation folder
# NOTE: this logic is re-used in the nexpyp script, so changes here should be synchronized there too
canondir="/opt/nextpyp"
scriptdir="$(dirname "$(realpath "$0")")"
if [ -L "$canondir" ]; then
  # canonical location is a link: follow it
  installdir="$(readlink "$canondir")"
  echo "Found installation folder from canonical link: $installdir"
elif [ -d "$canondir" ]; then
  # canonical location is a real folder: just use that
  installdir="$canondir"
  echo "Found installation folder in canonical location: $installdir"
elif [ -d "$scriptdir" ] && [ "$scriptdir" != "/usr/bin" ]; then
  # canonical location not found: use the folder containing this script
  installdir="$scriptdir"
  echo "Found installation folder using script location: $installdir"
else
  echo "ERROR: Failed to find installation folder, checked:"
  echo " * $canondir"
  echo " * $scriptdir"
  exit 1
fi


# get the local and shared directories from the install folder (which may be symlinks)
resolve_dir() { #(path)
  if [ -L "$1" ]; then
    realpath "$1"
  else
    echo "$1"
  fi
}
sharedexecdir="$(resolve_dir "$installdir/sharedExec")"


# determine filesystem capabilities
installOwner="$(stat -c '%U' "$installdir")"
if [ "$installOwner" = "root" ]; then
  echo "Install folder owned by root"
  installdo=
else
  echo "Install folder owned by $installOwner"
  installdo="sudo -u $admin"
  if [ "$installOwner" != "$admin" ]; then
    echo "WARNING: installation files owned by $installOwner may not be modifiable by administrator $admin"
  fi
fi

sharedExecOwner="$(stat -c '%U' "$sharedexecdir")"
if [ "$sharedExecOwner" = "root" ]; then
  echo "Shared exec folder owned by root"
  sharedexecdo=
else
  echo "Shared exec folder owned by $sharedExecOwner"
  sharedexecdo="sudo -u $admin"
  if [ "$sharedExecOwner" != "$admin" ]; then
    echo "WARNING: shared exec files owned by $sharedExecOwner may not be modifiable by administrator $admin"
  fi
fi


echo "Uninstalling nextPYP ..."


if [ "$oscaps" = "root" ]; then

  # uninstall systemd integrations
  appDaemon="nextPYP"
  systemctl disable $appDaemon 2> /dev/null
  systemctl stop $appDaemon 2> /dev/null
  rm "/lib/systemd/system/$appDaemon.service" 2> /dev/null

  # poke systemd to recognize the removal of the daemon
  systemctl daemon-reload

  # delete the canonical link
  canondir=/opt/nextpyp
  if [ -L "$canondir" ]; then
    rm "$canondir"
  fi
fi


# delete the executables from the bin dir
rm "$bindir/nextpyp" 2> /dev/null
rm "$bindir/nextpyp-host-processor" 2> /dev/null


# delete the files the installer downloaded
$installdo rm "$installdir/nextPYP.sif" 2> /dev/null
$installdo rm "$installdir/uninstall" 2> /dev/null
$installdo rm "$installdir/install-rprox" 2> /dev/null
$sharedexecdo rm -rf "$sharedexecdir/containers" 2> /dev/null
$sharedexecdo rm -rf "$sharedexecdir/user-processors" 2> /dev/null


echo "Finished uninstalling nextPYP"
echo "The configuration file, config.toml, was not deleted."
echo "Data stored in the local, shared, and workflows folders were also not deleted."
echo "If you wish to delete all of these as well, then it's safe to delete them now."
