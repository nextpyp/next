#!/bin/sh


# determine what capabilities we have
whoami=$(whoami)
if [ "$whoami" = "root" ]; then

  echo "Uninstalling in root mode: Will remove OS integrations"
  oscaps="root"

  # get the username for the service account
  username=$PYP_USER
  if [ -z "$username" ]; then
    echo "No PYP_USER set."
    exit
  fi

  # make a way to do things as the service account, like sudo, but user-do
  usdo="sudo -u $username"

  # get the home folder for the serivce account
  home=$(getent passwd "$username" | cut -d: -f6)

else

  echo "Uninstalling in user mode: Will not look for OS integrations"
  oscaps="user"

  username="$whoami"
  usdo=
  home="$HOME"

fi


# find the installation folder
# NOTE: this logic is re-used in the nexpyp script, so changes here should be synchronized there too
canondir="/opt/nextpyp"
scriptdir="$(dirname "$(realpath "$0")")"
if [ -L "$canondir" ]; then
  # canonical location is a link: follow it
  installdir="$(readlink "$canondir")"
  echo "Found installation folder from canonical link: $installdir"
elif [ -d "$canondir" ]; then
  # canonical location is a real folder: just use that
  installdir="$canondir"
  echo "Found installation folder in canonical location: $installdir"
elif [ -d "$scriptdir" ] && [ "$scriptdir" != "/usr/bin" ]; then
  # canonical location not found: use the folder containing this script
  installdir="$scriptdir"
  echo "Found installation folder using script location: $installdir"
else
  echo "Failed to find installation folder, checked:"
  echo " * $canondir"
  echo " * $scriptdir"
  exit 1
fi


if [ "$oscaps" = "root" ]; then

  # determine filesystem capabilities
  testfile="$installdir/__fscaps_test__"
  if touch "$testfile" ; then
    # root user can write to the installation folder
    rm "$testfile"
    # remove files/folders as root
    fsdo=
  else
    # root user can't write to the installation folder,
    # so remove files and folders as the service account instead
    fsdo=usdo
    echo "Uninstalling in root shared mode: Will remove files/folders as service account"
  fi

  # remove installed binaries from the OS bin dir
  bindir=/usr/bin

else

  fsdo=

  # remove "installed" binaries from here
  bindir="$installdir"

fi


echo "Uninstalling nextPYP ..."


if [ "$oscaps" = "root" ]; then

  # uninstall systemd integrations
  appDaemon="nextPYP"
  systemctl disable $appDaemon 2> /dev/null
  systemctl stop $appDaemon 2> /dev/null
  rm "/lib/systemd/system/$appDaemon.service" 2> /dev/null

  # poke systemd to recognize the removal of the daemon
  systemctl daemon-reload

fi


# delete the executables from the bin dir
rm "$bindir/nextpyp" 2> /dev/null
rm "$bindir/nextpyp-host-processor" 2> /dev/null


# delete the files the installer downloaded
$fsdo rm "$installdir/nextPYP.sif" 2> /dev/null
$fsdo rm "$installdir/pyp.sif" 2> /dev/null
$fsdo rm "$installdir/user-processor" 2> /dev/null
$fsdo rm "$installdir/uninstall" 2> /dev/null
$fsdo rm "$installdir/install-rprox" 2> /dev/null


if [ "$oscaps" = "root" ]; then

  # delete the canonical link
  canondir=/opt/nextpyp
  if [ -L "$canondir" ]; then
    rm "$canondir"
  fi
fi


echo "Finished uninstalling nextPYP"
echo "The configuration file, config.toml, was not deleted."
echo "Data stored in the local, shared, and workflows folders were also not deleted."
echo "If you wish to delete all of these as well, then it's safe to delete them now."
