
# The trick for getting Rust binaries to run on a wide variety of linux distros is not static linking libc,
# like I previously thought, but rather to dynamically link a very old version of GNU libc.
# So this container sets up a build environment for Rust using CentOS 7
# which uses a very old GNU libc: v2.17 (from 2012!)
# Probably no one's using anything in production older than that, eh?


Bootstrap: docker

#From: centos:7
# UPDATE: RedHat has taken the old Centos 7 repositories offline,
#         so we can't install OS packages anymore. =(

# So use a pre-built rust compiling container instead from cross-rs.
# see here for supported targets:
#   https://github.com/cross-rs/cross?tab=readme-ov-file#supported-targets
# and here's where they store all the container images, on GitHub's container repository:
#   https://github.com/orgs/cross-rs/packages
# we'll use the `x86_64-unknown-linux-gnu` target
# which has multiple versions:
#   https://github.com/cross-rs/cross/pkgs/container/x86_64-unknown-linux-gnu/versions?filters%5Bversion_type%5D=tagged
# container version 0.2.5-centos is Centos 7.9.2009 has glibc v2.17 (from 2012)
From: ghcr.io/cross-rs/x86_64-unknown-linux-gnu:0.2.5-centos

IncludeCmd: no

%environment
	# these are only set at continer runtime
	export RUSTUP_HOME=/usr/local/rustup
	export CARGO_HOME=/usr/local/cargo
	export PATH=$CARGO_HOME/bin:$PATH

%post

	# need to set envvars at build time too
	export RUSTUP_HOME=/usr/local/rustup
	export CARGO_HOME=/usr/local/cargo

	# install latest version of rustc
	mkdir -p "$CARGO_HOME"
	mkdir -p "$RUSTUP_HOME"
	curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

	# make a place to download crates
	registry_dir=$CARGO_HOME/registry
	mkdir -p "$registry_dir"
	chmod -R a=rwX "$registry_dir"
